using BrsTgBot.HttpClients.UserClient.Abstract;
using BrsTgBot.Services.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;

namespace BrsTgBot.Services;

public class AuthorizeInUrfuService(ITelegramBotClient botClient, IUserClient userClient) : IAuthorizeInUrfuService
{
    public async Task<bool> EnsureAuthorizedInUrfuAsync(Update update, CancellationToken cancellationToken)
    {
        var chatId = GetChatId(update);
        var username = GetUsername(update);

        if (chatId == long.MinValue) return false; // –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –º—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã(–æ–¥–Ω–∞ –∏–∑ –ø—Ä–∏—á–∏–Ω)

        if (await userClient.IsAuthorizedInUrfuAsync(chatId, cancellationToken))
            return true; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω

        await userClient.RegisterUserAsync(chatId, username, cancellationToken);
        return await ValidateLoginAndPasswordAsync(chatId, update, cancellationToken);
    }

    private long GetChatId(Update update)
    {
        var chatId = update.Type switch
        {
            UpdateType.Message => update.Message?.Chat.Id,
            UpdateType.CallbackQuery => update.CallbackQuery?.Message?.Chat.Id,
            _ => long.MinValue
        };

        return chatId.Value;
    }

    private string? GetUsername(Update update)
    {
        return update.Type switch
        {
            UpdateType.Message => update.Message?.Chat.Username,
            UpdateType.CallbackQuery => update.CallbackQuery?.Message?.Chat.Username,
            _ => null
        };
    }

    private string[]? GetLoginAndPassword(Update update)
    {
        if (update.Message?.Text is null) return null;

        var loginAndPassword = update.Message.Text.Split('\n');

        return loginAndPassword;
    }

    private async Task<bool> ValidateLoginAndPasswordAsync(long chatId, Update update,
        CancellationToken cancellationToken)
    {
        var loginPassword = GetLoginAndPassword(update);
        if (loginPassword?.First() == "/start")
        {
            await SendInfoAuthenticationAsync(chatId, cancellationToken);
            return false;
        }

        if (loginPassword is null || loginPassword.Length != 2)
        {
            await DeletePreviousMessageAsync(chatId, update.Message.MessageId, cancellationToken);
            await SendInvalidFormAsync(chatId, cancellationToken);
            return false;
        }

        var result =
            await userClient.AuthenticateInUrfuAsync(chatId, loginPassword[0], loginPassword[1], cancellationToken);

        if (result)
        {
            await DeletePreviousMessageAsync(chatId, update.Message.MessageId, cancellationToken);
            await SendSuccessfulAuthenticationAsync(chatId, cancellationToken);
            return true;
        }
        else
        {
            await DeletePreviousMessageAsync(chatId, update.Message.MessageId, cancellationToken);
            await SendUnsuccessfulAuthenticationAsync(chatId, cancellationToken);
            return false;
        }
    }

    private async Task SendSuccessfulAuthenticationAsync(long chatId, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId,
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –£—Ä–§–£ üîë",
            cancellationToken: cancellationToken);
    }

    private async Task SendInfoAuthenticationAsync(long chatId, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId,
            "‚ö†Ô∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –£—Ä–§–£\n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ —à–∞–±–ª–æ–Ω—É:\n–õ–û–ì–ò–ù\n–ü–ê–†–û–õ–¨",
            cancellationToken: cancellationToken);
    }

    private async Task SendUnsuccessfulAuthenticationAsync(long chatId, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
            cancellationToken: cancellationToken);
    }

    private async Task SendInvalidFormAsync(long chatId, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞üìù\n \n \n‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø–æ —à–∞–±–ª–æ–Ω—É:\n–õ–û–ì–ò–ù\n–ü–ê–†–û–õ–¨",
            cancellationToken: cancellationToken);
    }

    private async Task DeletePreviousMessageAsync(long chatId, int messageId, CancellationToken cancellationToken)
    {
        await botClient.DeleteMessageAsync(chatId, messageId, cancellationToken);
    }
}